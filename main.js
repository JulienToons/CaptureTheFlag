window.syncOtherPlayerFrameDelay = 0; //30 frames allows for 500ms of network jitter, to prevent late frames
window.currentChannelName; // Global variable for the current channel that your player character is on
window.currentFireChannelName; // Global variable that checks the current stage you are on to send the correct information to the PubNub Block
window.globalCurrentLevel = 0; // Global variable for the current level (index starts at 0)
window.UniqueID = window.PubNub.generateUUID(); // Generate a unique id for the player. Generated by the PubNub Network
window.globalLevelState = null; // Sets the globalLevelState to null if you aren't connected to the network. Once connected, the level will generate to the info that was on the block.
window.globalWasHeroMoving = true;
// console.log('UniqueID', UniqueID); // Print out your clientsr Unique ID
window.updateOccupancyCounter = false; // Occupancy Counter variable to check if the timer has already been called in that scene
window.keyMessages = [];


window.createMyPubNub = function (currentLevel) {
  // console.log('createMyPubNub', currentLevel);
  window.globalCurrentLevel = currentLevel; // Get the current level and set it to the global level

  //The channels should be the same while we have only one map/level
  window.currentFireChannelName = 'realtimephaserFire2';
  window.currentChannelName = `realtimephaser${currentLevel}`; // Create the channel name + the current level. This way each level is on its own channel.
  let checkIfJoined = false; // If player has joined the channel
  // Setup your PubNub Keys
  window.pubnub = new window.PubNub({
    publishKey: 'pub-c-341e4eab-1e92-41c2-a707-eeb0a8e97e43',
    subscribeKey: 'sub-c-645faf0a-7143-11ea-8eaf-9ea4064cf66f',
    uuid: window.UniqueID,
  });
  // Subscribe to the two PubNub Channels
  window.pubnub.subscribe({
    channels: [window.currentChannelName, window.currentFireChannelName],
    withPresence: true,
  });
  // ADD LISTENER HERE


  window.sendKeyMessage = (keyMessage) => {
  try {
    if (window.globalMyHero) {
      window.pubnub.publish({
        message: {
          uuid: window.UniqueID,
          keyMessage,
          position: window.globalMyHero.body.position,
          frameCounter: window.frameCounter
        },
        channel: window.currentChannelName,
        sendByPost: false, // true to send via posts
      });
    }
	      // console.log("send message!")
	  } catch (err) {
	    console.log(err);
	  }
	};
	window.fireCoins = () => {
	  const message = {
	    uuid: window.UniqueID,
	    coinCache: window.globalLevelState.coinCache,
	    currentLevel: window.globalCurrentLevel,
	    time: window.globalLastTime
	  };
	  // console.log('fireCoins', message);
	  window.pubnub.fire(
	    {
	      message,
	      channel: window.currentFireChannelName,
	      sendByPost: false, // true to send via posts
	    });
	};

  //MOVE ON

  // If person leaves or refreshes the window, run the unsubscribe function
  window.addEventListener('beforeunload', () => {
    navigator.sendBeacon(`https://pubsub.pubnub.com/v2/presence/sub_key/mySubKey/channel/ch1/leave?uuid=${window.UniqueID}`); // pub
    window.globalUnsubscribe();
  });
  // Unsubscribe people from PubNub network
  window.globalUnsubscribe = function () {
    try {
      // console.log('unsubscribing', window.currentChannelName);
      window.pubnub.unsubscribe({
        channels: [window.currentChannelName, window.currentFireChannelName],
        withPresence: true
      });
      window.pubnub.removeListener(window.listener);
    } catch (err) {
      console.log("Failed to UnSub");
    }
  };
  window.pubnub.addListener(window.listener);
};




window.addEventListener("load", function(event) {

	function playSound(soundfile) {
		document.getElementById("dummy").innerHTML = 
		"<embed src='"+soundfile+"' hidden='true' autostart='true' loop='false' />";
	}


	const AssetsManager = function() {
		this.playerSprite = undefined;
		this.bulletSprite = undefined;
	};

	AssetsManager.prototype = {
		constructor: Game.AssetsManager, requestImage:function(url, callback) {
			let image = new Image();
			image.addEventListener("load", function(event) {
				callback(image);
			}, { once:true });
			image.src = url;
		}
	};

	// var functions
	var keyDownUp = function(event) {
		controller.keyDownUp(event.type, event.keyCode);
	};
	var resize = function(event) {
		display.resize(document.documentElement.clientWidth, document.documentElement.clientHeight, height / width);
		display.render();
	};
	var render = function() {
		display.update();
		
		display.drawRectangle(game.world.me.x,game.world.me.y);
		// render gameobjects
		display.render();
	};
	var update = function(t) {
		// something like... 
		//if (controller.left.active) {       console.log("left");           }
		//if (controller.right.active) {            console.log("right");                }
		//if (controller.up.active) { console.log("up");controller.up.active= false;}//game.world.player.jump();      controller.up= false; }
		
		// or
		// game.world.player.down = controller.down.active;
		game.update(t);
		return;
	};
	setInterval(function(){
		if(needResize == true){
			clearElements();

			needResize = false; 
			resize();
		}
	}, 100);

	var display        = new Display(document.querySelector("canvas"));
	var game           = new Game(1000,600); // pixel resolution (probrably will want it to be low for fps but high for world size + cam.
	var engine         = new Engine(1000/30, render, update);
	var controller     = new Controller();
	var assets_manager = new AssetsManager();


	const width = game.world.width;
	const height = game.world.height;

	display.buffer.canvas.height = height;
	display.buffer.canvas.width  = width;
	display.buffer.imageSmoothingEnabled = false; //  sure??  ************************************************************************************!!!!!!!!!

	game.world.setup();
	/* 
	assets_manager.requestImage("imgs/theImageIWant.png", (image) => {

		assets_manager.cannon_img = image;

		// request more imgs
		
		resize();
		engine.start();

	});*/

	resize();
	engine.start();


	window.addEventListener("keydown", keyDownUp);
	window.addEventListener("keyup"  , keyDownUp);
	window.addEventListener("resize" , resize);

});


